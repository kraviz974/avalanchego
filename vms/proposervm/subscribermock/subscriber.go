// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanchego/vms/proposervm (interfaces: SelfSubscriber)
//
// Generated by this command:
//
//	mockgen -package=subscribermock -destination=subscribermock/subscriber.go -mock_names=SelfSubscriber=SelfSubscriber . SelfSubscriber
//

// Package subscribermock is a generated GoMock package.
package subscribermock

import (
	context "context"
	reflect "reflect"

	common "github.com/ava-labs/avalanchego/snow/engine/common"
	gomock "go.uber.org/mock/gomock"
)

// SelfSubscriber is a mock of SelfSubscriber interface.
type SelfSubscriber struct {
	ctrl     *gomock.Controller
	recorder *SelfSubscriberMockRecorder
}

// SelfSubscriberMockRecorder is the mock recorder for SelfSubscriber.
type SelfSubscriberMockRecorder struct {
	mock *SelfSubscriber
}

// NewSelfSubscriber creates a new mock instance.
func NewSelfSubscriber(ctrl *gomock.Controller) *SelfSubscriber {
	mock := &SelfSubscriber{ctrl: ctrl}
	mock.recorder = &SelfSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *SelfSubscriber) EXPECT() *SelfSubscriberMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *SelfSubscriber) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *SelfSubscriberMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*SelfSubscriber)(nil).Close))
}

// SetAbsorbedMsgAndHeight mocks base method.
func (m *SelfSubscriber) SetAbsorbedMsgAndHeight(arg0 common.Message, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAbsorbedMsgAndHeight", arg0, arg1)
}

// SetAbsorbedMsgAndHeight indicates an expected call of SetAbsorbedMsgAndHeight.
func (mr *SelfSubscriberMockRecorder) SetAbsorbedMsgAndHeight(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAbsorbedMsgAndHeight", reflect.TypeOf((*SelfSubscriber)(nil).SetAbsorbedMsgAndHeight), arg0, arg1)
}

// SubscribeToEvents mocks base method.
func (m *SelfSubscriber) SubscribeToEvents(arg0 context.Context, arg1 uint64) (common.Message, uint64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToEvents", arg0, arg1)
	ret0, _ := ret[0].(common.Message)
	ret1, _ := ret[1].(uint64)
	return ret0, ret1
}

// SubscribeToEvents indicates an expected call of SubscribeToEvents.
func (mr *SelfSubscriberMockRecorder) SubscribeToEvents(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToEvents", reflect.TypeOf((*SelfSubscriber)(nil).SubscribeToEvents), arg0, arg1)
}
